import aiosqlite
from typing import Optional, List, Tuple
from datetime import datetime
import logging

from config import DB_PATH, PAGE_SIZE, ALLOWED_ROLES, MAX_SEARCH_LENGTH

logger = logging.getLogger(__name__)

class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""

    def __init__(self):
        self.db_path = DB_PATH

    async def init(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–≤–∞—è —Ç–∞–±–ª–∏—Ü—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    username TEXT,
                    full_name TEXT,
                    role TEXT DEFAULT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """)

                await db.execute("""
                CREATE TABLE IF NOT EXISTS settings (
                    key TEXT PRIMARY KEY,
                    value TEXT,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """)

                await db.execute("""
                CREATE TABLE IF NOT EXISTS broadcast_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    admin_id INTEGER,
                    role_filter TEXT,
                    message TEXT,
                    recipients_count INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """)

                await db.execute("CREATE INDEX IF NOT EXISTS idx_users_role ON users(role)")
                await db.execute("CREATE INDEX IF NOT EXISTS idx_users_full_name ON users(full_name)")
                await db.execute("""
                INSERT OR IGNORE INTO settings (key, value) 
                VALUES ('welcome_message', '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞! üéì')
                """)
                await db.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
            raise

    async def add_user(self, user_id: int, username: str, full_name: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                INSERT INTO users (id, username, full_name, last_seen) 
                VALUES (?, ?, ?, ?)
                ON CONFLICT(id) DO UPDATE SET
                    username = excluded.username,
                    full_name = excluded.full_name,
                    last_seen = excluded.last_seen
                """, (user_id, username, full_name, datetime.now()))
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
            return False

    async def set_role(self, user_id: int, role: Optional[str]) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            if role and role not in ALLOWED_ROLES:
                raise ValueError(f"–ù–µ–¥—ñ–π—Å–Ω–∞ —Ä–æ–ª—å: {role}")
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("UPDATE users SET role=? WHERE id=?", (role, user_id))
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª—ñ –¥–ª—è {user_id}: {e}")
            return False

    async def get_users(self, offset: int = 0, limit: int = PAGE_SIZE,
                        role: Optional[str] = None) -> List[Tuple]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                if role and role != "ALL":
                    cur = await db.execute(
                        "SELECT id, full_name, username, role FROM users WHERE role=? "
                        "ORDER BY last_seen DESC LIMIT ? OFFSET ?",
                        (role, limit, offset)
                    )
                else:
                    cur = await db.execute(
                        "SELECT id, full_name, username, role FROM users "
                        "ORDER BY last_seen DESC LIMIT ? OFFSET ?",
                        (limit, offset)
                    )
                return await cur.fetchall()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    async def get_users_count(self, role: Optional[str] = None) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                if role and role != "ALL":
                    cur = await db.execute("SELECT COUNT(*) FROM users WHERE role=?", (role,))
                else:
                    cur = await db.execute("SELECT COUNT(*) FROM users")
                row = await cur.fetchone()
                return row[0] if row else 0
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return 0

    async def search_users(self, query: str) -> List[Tuple]:
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∏–ª–∏ –∏–º–µ–Ω–∏."""
        try:
            query = query.strip()[:MAX_SEARCH_LENGTH]
            if not query:
                return []
            async with aiosqlite.connect(self.db_path) as db:
                if query.isdigit():
                    cur = await db.execute("SELECT id, full_name, username, role FROM users WHERE id=?", (int(query),))
                else:
                    cur = await db.execute(
                        "SELECT id, full_name, username, role FROM users "
                        "WHERE full_name LIKE ? OR username LIKE ? LIMIT 20",
                        (f"%{query}%", f"%{query}%")
                    )
                return await cur.fetchall()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    async def get_roles_stats(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º."""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                stats = {role: 0 for role in ALLOWED_ROLES}
                for role in ALLOWED_ROLES:
                    cur = await db.execute("SELECT COUNT(*) FROM users WHERE role=?", (role,))
                    stats[role] = (await cur.fetchone())[0]

                cur = await db.execute("SELECT COUNT(*) FROM users")
                stats["all"] = (await cur.fetchone())[0]
                return stats
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–ª—ñ: {e}")
            return {role: 0 for role in ALLOWED_ROLES + ["all"]}

    async def get_setting(self, key: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                cur = await db.execute("SELECT value FROM settings WHERE key=?", (key,))
                row = await cur.fetchone()
                return row[0] if row else None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å {key}: {e}")
            return None

    async def set_setting(self, key: str, value: str) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                INSERT INTO settings (key, value, updated_at) VALUES (?, ?, ?)
                ON CONFLICT(key) DO UPDATE SET value=excluded.value, updated_at=excluded.updated_at
                """, (key, value, datetime.now()))
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è {key}: {e}")
            return False

    async def get_users_for_broadcast(self, role: Optional[str] = None) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏."""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                if role and role != "ALL":
                    cur = await db.execute("SELECT id FROM users WHERE role=?", (role,))
                else:
                    cur = await db.execute("SELECT id FROM users")
                rows = await cur.fetchall()
                return [row[0] for row in rows]
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó: {e}")
            return []

    async def save_broadcast(self, admin_id: int, role_filter: str, message: str, recipients_count: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π."""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                INSERT INTO broadcast_history (admin_id, role_filter, message, recipients_count, created_at)
                VALUES (?, ?, ?, ?, ?)
                """, (admin_id, role_filter, message, recipients_count, datetime.now()))
                await db.commit()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ–π: {e}")