import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import Database

router = Router()
db = Database()
logger = logging.getLogger(__name__)

class SaveUserMiddleware:
    """–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    async def __call__(self, handler, event, data):
        if event.from_user and not event.from_user.is_bot:
            await db.add_user(event.from_user.id, event.from_user.username, event.from_user.full_name)
        return await handler(event, data)

@router.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    welcome = await db.get_setting("welcome_message")
    if not welcome:
        welcome = "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞! üéì"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="info")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏", callback_data="contacts")]
    ])

    await message.answer(welcome, reply_markup=keyboard)
    logger.info(f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {message.from_user.id} - {message.from_user.full_name}")

@router.message(Command("help"))
async def help_command(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help."""
    text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n"
        "/start - –ü–æ—á–∞—Ç–∏\n"
        "/help - –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É\n"
    )
    await message.answer(text)

@router.callback_query(F.data == "info")
async def show_info(callback: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ."""
    await callback.message.edit_text("–¶–µ–π –±–æ—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–ø—ñ–ª—å–Ω–æ—Ç–æ—é.")
    await callback.answer()

@router.callback_query(F.data == "contacts")
async def show_contacts(callback: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    #await callback.message.edit_text("–í–∏ –º–æ–∂–µ—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏ —á–µ—Ä–µ–∑ @–≤–∞—à–µ_–∫–æ–Ω—Ç–∞–∫—Ç–Ω–µ_—ñ–º'—è_–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    #await callback.answer()
    text = (
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏\n\n"
        "üìß Email: info@university.edu\n"
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +380 XX XXX XX XX\n"
        "üåê –°–∞–π—Ç: www.university.edu\n\n"
        "–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏:\n"
        "–ü–Ω-–ü—Ç: 9:00 - 18:00\n"
        "–°–±-–ù–¥: –≤–∏—Ö—ñ–¥–Ω—ñ"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "back_to_start")
async def back_to_start(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é."""
    welcome = await db.get_setting("welcome_message")
    if not welcome:
        welcome = "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞! üéì"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="info")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏", callback_data="contacts")]
    ])

    await callback.message.edit_text(welcome, reply_markup=keyboard)
    await callback.answer()