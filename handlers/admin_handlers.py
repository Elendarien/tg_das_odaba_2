import asyncio
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from config import ADMINS, MAX_MESSAGE_LENGTH, ALLOWED_ROLES, PAGE_SIZE
from database import Database
from states import SearchUser, EditWelcome, Broadcast
from keyboards import get_admin_panel_kb, get_user_list_kb, get_broadcast_roles_kb

router = Router()
db = Database()
logger = logging.getLogger(__name__)


# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id: int):
    return user_id in ADMINS


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
async def _get_admin_panel_text():
    stats = await db.get_roles_stats()
    return (
        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        f"üë§ –ó–∞–≥–∞–ª—å–Ω–∞ –∫-—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['all']}\n"
        f"üéì –°—Ç—É–¥–µ–Ω—Ç–∏: {stats.get('–°—Ç—É–¥–µ–Ω—Ç', 0)}\n"
        f"üìö –ê–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∏: {stats.get('–ê–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç', 0)}\n"
        f"üßë‚Äçüè´ –í–∏–∫–ª–∞–¥–∞—á—ñ: {stats.get('–í–∏–∫–ª–∞–¥–∞—á', 0)}\n"
        f"üë™ –ë–∞—Ç—å–∫–∏: {stats.get('–ë–∞—Ç—å–∫–æ', 0)}\n"
    )


@router.message(Command("admin"), F.from_user.id.in_(ADMINS))
async def admin_panel(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    text = await _get_admin_panel_text()
    keyboard = get_admin_panel_kb()
    await message.answer(text, reply_markup=keyboard)
    logger.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –≤—ñ–¥–∫—Ä–∏–≤ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


@router.callback_query(F.data == "refresh_admin", F.from_user.id.in_(ADMINS))
async def refresh_admin_panel(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    text = await _get_admin_panel_text()
    keyboard = get_admin_panel_kb()
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ!")
    except TelegramBadRequest:
        await callback.answer()


@router.callback_query(F.data.startswith("manage_users"), F.from_user.id.in_(ADMINS))
async def manage_users(callback: types.CallbackQuery):
    """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é."""
    data = callback.data.split(':')
    page = int(data[1])
    role_filter = data[2]

    users = await db.get_users(offset=page * PAGE_SIZE, role=role_filter)
    total_users = await db.get_users_count(role=role_filter)

    text = f"üë§ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (Page {page + 1}/{total_users // PAGE_SIZE + 1})\n\n"
    for uid, name, username, urole in users:
        user_info = f"‚ñ™Ô∏è {name} (ID: `{uid}`)"
        if username:
            user_info += f" (@{username})"
        user_info += f" | –†–æ–ª—å: {urole if urole else '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}"
        text += user_info + "\n"
    if not users:
        text = "–ó–∞ —Ü–∏–º —Ñ—ñ–ª—å—Ç—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."

    keyboard = get_user_list_kb(users, page, total_users, role_filter)

    try:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        await callback.answer()
    except TelegramBadRequest:
        await callback.answer()


@router.callback_query(F.data.startswith("setrole"), F.from_user.id.in_(ADMINS))
async def set_user_role(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = callback.data.split(':')
    user_id = int(data[1])
    new_role = data[2]
    page = int(data[3])
    role_filter = data[4]

    if new_role == "NULL":
        new_role_val = None
    else:
        new_role_val = new_role

    success = await db.set_role(user_id, new_role_val)
    if success:
        await callback.answer(f"‚úÖ –†–æ–ª—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_role}")
    else:
        await callback.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä–æ–ª—å.", show_alert=True)

    # Refresh the user list to show the change
    await state.update_data(page=page, role_filter=role_filter)
    await manage_users(callback)


@router.callback_query(F.data == "search_user", F.from_user.id.in_(ADMINS))
async def start_search_user(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await state.set_state(SearchUser.waiting_query)
    await callback.message.edit_text("üîç –í–≤–µ–¥—ñ—Ç—å —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —á–∞—Å—Ç–∏–Ω—É –π–æ–≥–æ —ñ–º–µ–Ω—ñ/—ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    await callback.answer()


@router.message(SearchUser.waiting_query, F.from_user.id.in_(ADMINS))
async def process_search_user(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."""
    query = message.text
    if not query:
        await message.answer("‚ùå –ù–µ–¥—ñ–π—Å–Ω–∏–π –∑–∞–ø–∏—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    users = await db.search_users(query)
    text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:\n\n"
    if users:
        for uid, name, username, urole in users:
            user_info = f"‚ñ™Ô∏è {name} (ID: `{uid}`)"
            if username:
                user_info += f" (@{username})"
            user_info += f" | –†–æ–ª—å: {urole if urole else '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}"
            text += user_info + "\n"
    else:
        text = "‚ùå –ó–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."

    keyboard = get_admin_panel_kb()
    await message.answer(text, reply_markup=keyboard, parse_mode='Markdown')
    await state.clear()


@router.callback_query(F.data == "edit_welcome", F.from_user.id.in_(ADMINS))
async def start_edit_welcome(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await state.set_state(EditWelcome.waiting_text)
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
    await callback.answer()


@router.message(EditWelcome.waiting_text, F.from_user.id.in_(ADMINS))
async def process_edit_welcome(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    new_text = message.text
    if not new_text or len(new_text) > MAX_MESSAGE_LENGTH:
        await message.answer("‚ùå –ù–µ–¥—ñ–π—Å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í–æ–Ω–æ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–º.")
        return

    success = await db.set_setting("welcome_message", new_text)
    if success:
        await message.answer("‚úÖ –í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    await state.clear()


@router.callback_query(F.data == "broadcast", F.from_user.id.in_(ADMINS))
async def start_broadcast(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ—Ç–æ–∫ –≤–µ—â–∞–Ω–∏—è."""
    await state.set_state(Broadcast.select_role)
    await callback.message.edit_text("üì¢ –í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫–∏–º –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
                                     reply_markup=get_broadcast_roles_kb())
    await callback.answer()


@router.callback_query(Broadcast.select_role, F.data.startswith("broadcast_role"), F.from_user.id.in_(ADMINS))
async def select_broadcast_role(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Ä–æ–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏."""
    role = callback.data.split(':')[1]
    await state.update_data(role_filter=role)
    await state.set_state(Broadcast.waiting_message)
    await callback.message.edit_text(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ —Ä–æ–ª—å: {role}\n\n"
                                     f"üí¨ –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏. "
                                     f"–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Markdown.")
    await callback.answer()


@router.message(Broadcast.waiting_message, F.from_user.id.in_(ADMINS))
async def waiting_broadcast_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    text = message.html_text
    if not text or len(text) > MAX_MESSAGE_LENGTH:
        await message.answer("‚ùå –ù–µ–¥—ñ–π—Å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í–æ–Ω–æ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–º.")
        return

    await state.update_data(message=text)
    await state.set_state(Broadcast.confirm)

    data = await state.get_data()
    role_filter = data.get('role_filter')
    recipients_count = await db.get_users_count(role=role_filter)

    confirm_text = (
        f"üì¢ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó\n\n"
        f"–†–æ–ª—å –æ–¥–µ—Ä–∂—É–≤–∞—á–∞: {role_filter}\n"
        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–µ—Ä–∂—É–≤–∞—á—ñ–≤: {recipients_count}\n\n"
        f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n\n{text}"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="confirm_send_broadcast")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_broadcast")]
    ])

    await message.answer(confirm_text, reply_markup=kb, parse_mode='HTML')


@router.callback_query(Broadcast.confirm, F.data == "confirm_send_broadcast", F.from_user.id.in_(ADMINS))
async def confirm_broadcast(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é."""
    data = await state.get_data()
    role_filter = data.get('role_filter')
    message_text = data.get('message')

    await callback.message.edit_text("‚è≥ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó...")
    await callback.answer()

    user_ids = await db.get_users_for_broadcast(role=role_filter)
    sent_count = 0
    failed_count = 0
    for user_id in user_ids:
        try:
            await asyncio.sleep(0.05)  # Flood control
            await callback.bot.send_message(user_id, message_text, parse_mode='HTML')
            sent_count += 1
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ {user_id}: {e}")
            failed_count += 1

    await db.save_broadcast(callback.from_user.id, role_filter, message_text, sent_count)

    await callback.message.edit_text(
        f"‚úÖ –¢—Ä–∞–Ω—Å–ª—è—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!\n\n"
        f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {sent_count}\n"
        f"–ù–µ –≤–¥–∞–ª–æ—Å—è: {failed_count}"
    )
    await state.clear()


@router.callback_query(F.data == "cancel_broadcast", F.from_user.id.in_(ADMINS))
async def cancel_broadcast(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏."""
    await state.clear()
    await callback.message.edit_text("‚ùå –¢—Ä–∞–Ω—Å–ª—è—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await callback.answer()


@router.callback_query(F.data == "back_to_admin", F.from_user.id.in_(ADMINS))
async def back_to_admin(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    await state.clear()
    text = await _get_admin_panel_text()
    keyboard = get_admin_panel_kb()
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    except TelegramBadRequest:
        await callback.answer()


@router.callback_query(F.data == "none")
async def none_callback(callback: types.CallbackQuery):
    """–ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."""
    await callback.answer()